eBPF Devroom Proposal

eBPF is a technology originally developed to make the Linux kernel more programmable. It allows users to load safe and efficient programs into the kernel, to attach them to various hooks, and to run these programs on specific events to address multiple goals. When attached to kernel or user functions, eBPF brings visibility for tracing and monitoring. Attached to networking hooks, eBPF programs can encapsulate, redirect, drop, or forward packets, working in concert with the kernel stack. The BPF LSM makes it possible to implement security policies. Various other attach points provide new ways to bring programmability to the kernel.

Today, eBPF is no longer limited to Linux; it extends to Windows, user-space runtimes, and even hardware offloads. The depth of the ecosystem has expanded far beyond its original goals and has seen increasing adoption from both enthusiasts and professionals within the open-source community. In parallel, the list of use cases and related projects continues to grow. Following the success of eBPF at conferences such as the virtual eBPF Summit and the eBPF track at the Linux Plumbers Conference, we would like to propose a FOSDEM devroom dedicated to the work, tools, and use cases surrounding eBPF.

Topics of interest include (but are not limited to):

- eBPF development: recent or proposed features (on Linux, on other platforms, or even cross-platforms), such as:
    - eBPF program signing and supply chain security
    - Profiling eBPF with eBPF
    - eBPF-based process schedulers
    - eBPF in storage devices
    - eBPF verifier improvements or alternative implementations
- Deep-dives on existing eBPF features
- Working with eBPF: best practices, common mistakes, debugging, etc.
- eBPF toolchain, for compiling, managing, debugging, packaging, and deploying eBPF programs and related objects
- eBPF libraries, in C/C++, Go, Rust, or other languages
- eBPF-based projects, related use cases
- eBPF in the real world, production use cases and their impact
- eBPF community efforts (documentation, standardisation, cross-platform initiatives)

Why does it fit FOSDEM:

eBPF complies well with the open source aspects of FOSDEM: Its whole ecosystem is open-source. eBPF programs themselves are usually GPL or GPL-compatible, so they can interface with the Linux kernel. All known runtimes (even for hardware offloads) are open-source, and so are the majority of the projects using eBPF.

eBPF is of interest to a vast and growing number of users. The number of open-source projects based on the technology keeps expanding (see https://ebpf.io/applications/), and an increasing number of platforms can run it: Linux, Windows, user space runtimes, hardware offloads, and likely more to come. Similarly, adoption within the industry is growing fast. The numerous use cases for eBPF overlap with more and more topics that have proved relevant to FOSDEM in the past: monitoring, networking, containers, security, LLVM/tooling, Go and Rust programming (see the list of previous FOSDEM talks in the “Relevant URLs” section), to the point that it now makes sense to propose a dedicated devroom.

eBPF is also under active development and its infrastructure keeps evolving. Recent features in Linux include dynamic pointers, memory allocator, new program types, better support for loops, a sparse shared memory region, controlling the CPU scheduler, tokens for enabling controlled eBPF usage from containers, cookies for contextual hints, generic iterators, enhanced HID support via HID-BPF and many others. eBPF is also under continuous development in the Windows project, actively closing the gap.

Multiple projects are under active development, and new eBPF-based projects keep emerging. Therefore, there is a strong interest in the eBPF community to gather and talk, to discuss the progress of the various projects, and to share with all the people who may be interested.

Organizers and their affinity to the topic:

- Quentin Monnet
    - Quentin has been working with eBPF since its early days, contributing across three companies: using it for stateful packet processing at 6WIND, working on eBPF hardware offload at Netronome, and worked on the datapath of Cilium. He has authored 250+ eBPF-related kernel patches, maintains bpftool, created rbpf (a Rust-based runtime), and has contributed to the documentation and standardization of eBPF. He frequently writes about eBPF on various blogs (personal blog, company maintained blogs, ebpf.io) and has spoken on the topic, including five talks at FOSDEM.
- Daniel Borkmann
    - Daniel currently works at Isovalent. He is a co-author and co-maintainer of the eBPF subsystem in Linux, as well as a member of the BPF Steering Committee at the eBPF Foundation.
- Bill Mulligan
    - Bill works at Isovalent, authors a bi-weekly eBPF newsletter, helps maintain ebpf.io, has excellent knowledge of the eBPF community and ecosystem, and has contributed to the organization of eBPF Summit.
- Dimitar Kanaliev
    - I am a software engineer at SiteGround, I’ve given several talks about eBPF and I am an active member of the eBPF and CNCF communities. I've been working with eBPF (XDP, high performance software defined networking) for the past few years.

Relevant URLs:

- eBPF website: https://ebpf.io

- Non-exhaustive list of eBPF-based projects: https://ebpf.io/applications

- Other eBPF-related conferences (excerpt):
    - eBPF Summit 2024 (https://ebpf.io/summit-2024/)
    - Linux Plumbers 2024, eBPF track (https://lpc.events/event/18/sessions/181/#all)

- Daniel Borkmann's keynote at the eBPF Summit 2022, on recent and future innovations for eBPF: https://www.youtube.com/watch?v=0YqF45Kaapo&t=14552s

- List of previous BPF-related talks at FOSDEM (we probably missed a few):

    - 2017:
        - Stateful packet processing with eBPF an implementation of OpenState interface (https://archive.fosdem.org/2017/schedule/event/stateful_ebpf/)
        - gobpf - utilizing eBPF from Go (https://archive.fosdem.org/2017/schedule/event/go_bpf/)
        - eBPF and XDP walkthrough and recent updates (https://archive.fosdem.org/2017/schedule/event/ebpf_xdp/)
        - Cilium - BPF & XDP for containers (https://archive.fosdem.org/2017/schedule/event/cilium/)
        - Stateful packet processing with eBPF (https://archive.fosdem.org/2017/schedule/event/stateful_ebpf/)

    - 2018:
        - The challenges of XDP hardware offload (https://archive.fosdem.org/2018/schedule/event/xdp/)
        - Fast Packet Processing in Linux with AF_XDP (https://archive.fosdem.org/2018/schedule/event/af_xdp/)

    - 2019:
        - Introducing kubectl-trace (https://archive.fosdem.org/2019/schedule/event/containers_kubectl_trace/)
        - Rewriting Pointer Dereferences in bcc with Clang (https://archive.fosdem.org/2019/schedule/event/llvm_bpf_rewriting/)
        - Using eBPF for Linux Performance Analyses (https://archive.fosdem.org/2019/schedule/event/using_ebpf_for_linux_performance_analyses/)
        - XDP (eXpress Data Path) as a building block for other FOSS projects (https://archive.fosdem.org/2019/schedule/event/xdp_overview_and_update/)
        - Cilium - overview and recent updates (https://archive.fosdem.org/2019/schedule/event/cilium_overview_and_updates/)
        - Merging System and Network Monitoring with BPF (https://archive.fosdem.org/2019/schedule/event/merging_system_and_network_monitoring_with_bpf/)
        - Unifying network filtering rules for the Linux kernel with eBPF (https://archive.fosdem.org/2019/schedule/event/network_filtering_with_bpf/)
        - Oko: Open vSwitch Extensions with BPF (https://archive.fosdem.org/2019/schedule/event/oko_open_vswitch_extensions_with_bpf/)
        - eBPF powered Distributed Kubernetes performance analysis (https://archive.fosdem.org/2019/schedule/event/ebpf_kubernetes/)

    - 2020:
        - BPF as a revolutionary technology for the container landscape (https://archive.fosdem.org/2020/schedule/event/containers_bpf/)
        - Inspektor Gadget and traceloop (https://archive.fosdem.org/2020/schedule/event/containers_bpf_tracing/)
        - strace --seccomp-bpf: a look under the hood (https://archive.fosdem.org/2020/schedule/event/debugging_strace_bpf/)
        - Tools and mechanisms to debug BPF programs (https://archive.fosdem.org/2020/schedule/event/debugging_bpf/)
        - Falco Internals 101 : Syscalls processing for security analysis (https://archive.fosdem.org/2020/schedule/event/security_falco_internals_101/)
        - seccomp — Your Next Layer of Defense (https://archive.fosdem.org/2020/schedule/event/security_seccomp/)
        - Kernel Runtime Security Instrumentation (https://archive.fosdem.org/2020/schedule/event/security_kernel_runtime_security_instrumentation/)
        - Endless Network Programming − An Update from eBPF Land (https://archive.fosdem.org/2020/schedule/event/endless_network_programming/)
        - Replacing iptables with eBPF in Kubernetes with Cilium (https://archive.fosdem.org/2020/schedule/event/replacing_iptables_with_ebpf/)
        - Analyzing DPDK applications with eBPF (https://archive.fosdem.org/2020/schedule/event/analyzing_dpdk_applications_with_ebpf/)
        - XDP and page_pool API (https://archive.fosdem.org/2020/schedule/event/xdp_and_page_pool_api/)
        - Mixing kool-aids! Accelerate the internet with AF_XDP & DPDK (https://archive.fosdem.org/2020/schedule/event/mixing_kool_aids/)
        - Vita: high-speed traffic encryption on x86_64 with Snabb (https://archive.fosdem.org/2020/schedule/event/vita_high_speed_traffic_encryption_on_x86_64/)

    - 2021:
        - Advanced BPF kernel features for the container age (https://archive.fosdem.org/2021/schedule/event/containers_ebpf_kernel/)
        - Monitoring MariaDB Server with bpftrace on Linux (https://archive.fosdem.org/2021/schedule/event/mariadb_bpftrace/ )
        - hXDP: Efficient Software Packet Processing on FPGA NICs (https://archive.fosdem.org/2021/schedule/event/sdn_hxdp_fpga/)
        - Deploying eBPF, XDP & AF_XDP for Cloud Native (https://archive.fosdem.org/2021/schedule/event/sdn_ebpf_afxdp/)
        - Seccomp Notify on Kubernetes (https://archive.fosdem.org/2021/schedule/event/containers_k8s_seccomp_notify/)

    - 2022:
        - ply: lightweight eBPF tracing (https://archive.fosdem.org/2022/schedule/event/ply_ebpf/)
        - Coverage for eBPF programs (https://archive.fosdem.org/2022/schedule/event/llvm_ebpf/)
        - More on bpftrace for MariaDB DBAs and Developers (https://archive.fosdem.org/2022/schedule/event/mariadb_bfptrace/)
        - Monitoring Kafka without instrumentation using eBPF (https://archive.fosdem.org/2022/schedule/event/monitoring_kafka_using_ebpf/)

    - 2023:
        - How to package BPF software for Linux distributions (https://archive.fosdem.org/2023/schedule/event/package_bpf_linux/) 
        - OpenCSD, simple and intuitive computational storage emulation with QEMU and eBPF (https://archive.fosdem.org/2023/schedule/event/csd/)
        - What's new in Delve / Tracing Go programs with eBPF (https://archive.fosdem.org/2023/schedule/event/godelve/)
        - Walking native stacks in BPF without frame pointers (https://archive.fosdem.org/2023/schedule/event/walking_stack_without_frame_pointers/)
        - Rust in the Kernel (via eBPF) (https://archive.fosdem.org/2023/schedule/event/rust_ebpf/)
        - Optimizing BPF hashmap and friends (https://archive.fosdem.org/2023/schedule/event/bpf_hashing/)
        - eBPF loader deep dive	(https://archive.fosdem.org/2023/schedule/event/bpf_loader/)
        - Inspektor Gadget: An eBPF Based Tool to Observe Containers (https://archive.fosdem.org/2023/schedule/event/ebpf/)

    - 2024:
        - Orchestrating eBPF Applications in Kubernetes and Fedora (https://archive.fosdem.org/2024/schedule/event/fosdem-2024-1745-orchestrating-ebpf-applications-in-kubernetes-and-fedora/)
        - Implementing distributed traces with eBPF (https://archive.fosdem.org/2024/schedule/event/fosdem-2024-3499-implementing-distributed-traces-with-ebpf/)
        - Netfilter or eBPF? Use both with bpfilter! (https://archive.fosdem.org/2024/schedule/event/fosdem-2024-2143-netfilter-or-ebpf-use-both-with-bpfilter-/)
        - Packet Where aRe You - An eBPF based tool for diagnosing Linux networking (https://archive.fosdem.org/2024/schedule/event/fosdem-2024-2364-packet-where-are-you-an-ebpf-based-tool-for-diagnosing-linux-networking/)
        - Profiling Python with eBPF: A New Frontier in Performance Analysis (https://archive.fosdem.org/2024/schedule/event/fosdem-2024-2735-profiling-python-with-ebpf-a-new-frontier-in-performance-analysis/)
        - Load balancing using XDP (https://archive.fosdem.org/2024/schedule/event/fosdem-2024-3101-load-balancing-using-xdp/)
